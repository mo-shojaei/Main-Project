import unittest
import DataCleaner

class TestDataCleaner(unittest.TestCase):
    
    def test_to_lowercase(self):
        self.assertEqual(DataCleaner.to_lowercase(["They", "know", "about", "this", "problem", "."]), ["they", "know", "about", "this", "problem", "."])
        self.assertEqual(DataCleaner.to_lowercase(["The", "Google", "Chrome", "should", "work", "."]), ["the", "google", "chrome", "should", "work", "."])
        self.assertEqual(DataCleaner.to_lowercase(["This", "is", "the", "problem", ".", "You", "should", "know", "."]), ["this", "is", "the", "problem", ".", "you", "should", "know", "."])
    
    def test_remove_punctuation(self):
        self.assertEqual(DataCleaner.remove_punctuation(["They", "know", "about", "this", "problem", "."]), ["They", "know", "about", "this", "problem"])
        self.assertEqual(DataCleaner.remove_punctuation(["First", ",", "they", "should", "know", "about", "this", "problem", "."]), ["First", "they", "should", "know", "about", "this", "problem"])
        self.assertEqual(DataCleaner.remove_punctuation(["This", "is", "the", "problem", ".", "You", "should", "know", "!"]), ["This", "is", "the", "problem", "You", "should", "know"])
    
    def test_remove_numbers(self):
        self.assertEqual(DataCleaner.remove_numbers(['1', ')', 'constant', 'advertising', 'the', 'premium', 'version', '-', 'which', 'is', 'keeping', 'me', 'from', 'being', 'productive', '-', 'which', 'is', 'counter', 'productive', '2', ')', 'It', 'seems', 'on', 'desktop', 'version', 'that', 'I', 'do', "n't", 'have', 'a', 'choice', 'on', 'calendar', 'to', 'see', 'day', ',', '3', 'days', ',', 'week', ',', 'month', '3', ')', 'and', 'again', 'the', 'pop', 'up', 'for', 'premium', 'Anyway', '.', 'on', 'to', 'the', 'next', 'planner', 'app', '.']), ['', ')', 'constant', 'advertising', 'the', 'premium', 'version', '-', 'which', 'is', 'keeping', 'me', 'from', 'being', 'productive', '-', 'which', 'is', 'counter', 'productive', '', ')', 'It', 'seems', 'on', 'desktop', 'version', 'that', 'I', 'do', "n't", 'have', 'a', 'choice', 'on', 'calendar', 'to', 'see', 'day', ',', '', 'days', ',', 'week', ',', 'month', '', ')', 'and', 'again', 'the', 'pop', 'up', 'for', 'premium', 'Anyway', '.', 'on', 'to', 'the', 'next', 'planner', 'app', '.'])
    
    def test_remove_stopwords(self):
        self.assertEqual(DataCleaner.remove_stopwords(['They', 'made', 'me', 'sign', 'up', 'for', 'premium', 'just', 'to', 'have', 'recurring', 'alerts', ',', 'then', 'do', "n't", 'even', 'have', 'a', 'hourly', 'option', '.', 'I', 'got', 'this', 'app', 'because', 'it', 'showed', 'up', 'during', 'my', 'search', '.', 'I', 'want', 'a', 'tasks', 'that', 'reminds', 'me', 'multiple', 'times', 'a', 'day', '.']), ['They', 'made', 'sign', 'premium', 'recurring', 'alerts', ',', "n't", 'even', 'hourly', 'option', '.', 'I', 'got', 'app', 'showed', 'search', '.', 'I', 'want', 'tasks', 'reminds', 'multiple', 'times', 'day', '.'])
        self.assertEqual(DataCleaner.remove_stopwords(['Too', 'archaic', '.', 'It', 'seems', 'like', 'this', 'might', 'have', 'been', 'a', 'good', 'app', 'in', 'the', 'beginnings', 'phases', ',', 'but', 'slowly', 'turned', 'into', 'this', 'monstrosity', 'that', 'is', 'put', 'together', 'about', 'as', 'well', 'as', 'a', 'teenager', "'s", 'bedroom', '.']), ['Too', 'archaic', '.', 'It', 'seems', 'like', 'might', 'good', 'app', 'beginnings', 'phases', ',', 'slowly', 'turned', 'monstrosity', 'put', 'together', 'well', 'teenager', "'s", 'bedroom', '.'])
        self.assertEqual(DataCleaner.remove_stopwords(['Been', 'using', 'this', 'for', 'ages', '.', 'Used', 'it', 'this', 'morning', 'to', 'remind', 'me', 'while', 'out', 'shopping', '.', 'An', 'hour', 'later', 'it', 'is', 'insisting', 'i', 'sign', 'in', 'and', 'wo', "n't", 'let', 'me', 'back', 'in', '.', 'WHY', '?', '?', '?', 'Thanks', 'but', 'I', "'ve", 'now', 'uninstalled', 'your', 'app', 'and', 'found', 'an', 'easier', 'to', 'use', 'alternative', '.']), ['Been', 'using', 'ages', '.', 'Used', 'morning', 'remind', 'shopping', '.', 'An', 'hour', 'later', 'insisting', 'sign', 'wo', "n't", 'let', 'back', '.', 'WHY', '?', '?', '?', 'Thanks', 'I', "'ve", 'uninstalled', 'app', 'found', 'easier', 'use', 'alternative', '.'])
    
    def test_lemmatize_verbs(self):
        self.assertEqual(DataCleaner.lemmatize_verbs(['Been', 'using', 'this', 'for', 'ages', '.', 'Used', 'it', 'this', 'morning', 'to', 'remind', 'me', 'while', 'out', 'shopping', '.', 'An', 'hour', 'later', 'it', 'is', 'insisting', 'i', 'sign', 'in', 'and', 'wo', "n't", 'let', 'me', 'back', 'in', '.', 'WHY', '?', '?', '?', 'Thanks', 'but', 'I', "'ve", 'now', 'uninstalled', 'your', 'app', 'and', 'found', 'an', 'easier', 'to', 'use', 'alternative', '.']), ['Been', 'use', 'this', 'for', 'age', '.', 'Used', 'it', 'this', 'morning', 'to', 'remind', 'me', 'while', 'out', 'shop', '.', 'An', 'hour', 'later', 'it', 'be', 'insist', 'i', 'sign', 'in', 'and', 'wo', "n't", 'let', 'me', 'back', 'in', '.', 'WHY', '?', '?', '?', 'Thanks', 'but', 'I', "'ve", 'now', 'uninstalled', 'your', 'app', 'and', 'find', 'an', 'easier', 'to', 'use', 'alternative', '.'])
        self.assertEqual(DataCleaner.lemmatize_verbs(['Too', 'archaic', '.', 'It', 'seems', 'like', 'this', 'might', 'have', 'been', 'a', 'good', 'app', 'in', 'the', 'beginnings', 'phases', ',', 'but', 'slowly', 'turned', 'into', 'this', 'monstrosity', 'that', 'is', 'put', 'together', 'about', 'as', 'well', 'as', 'a', 'teenager', "'s", 'bedroom', '.']), ['Too', 'archaic', '.', 'It', 'seem', 'like', 'this', 'might', 'have', 'be', 'a', 'good', 'app', 'in', 'the', 'beginnings', 'phase', ',', 'but', 'slowly', 'turn', 'into', 'this', 'monstrosity', 'that', 'be', 'put', 'together', 'about', 'as', 'well', 'as', 'a', 'teenager', "'s", 'bedroom', '.'])
        self.assertEqual(DataCleaner.lemmatize_verbs(['It', 'seems', 'they', 'are', 'not', 'quality', 'testing', 'their', 'recent', 'updates', 'for', 'bugs', '.', 'Lots', 'of', 'issues', 'coming', 'up', '.', 'Seriously', 'thinking', 'of', 'shifting', 'to', 'another', 'tasks', 'app', '.', 'It', 'will', 'take', 'some', 'efforts', 'on', 'my', 'side', 'but', 'looks', 'like', 'no', 'choice', '.']), ['It', 'seem', 'they', 'be', 'not', 'quality', 'test', 'their', 'recent', 'update', 'for', 'bug', '.', 'Lots', 'of', 'issue', 'come', 'up', '.', 'Seriously', 'think', 'of', 'shift', 'to', 'another', 'task', 'app', '.', 'It', 'will', 'take', 'some', 'efforts', 'on', 'my', 'side', 'but', 'look', 'like', 'no', 'choice', '.'])

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
